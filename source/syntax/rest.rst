reStructuredText 语法
=====================

:作者: kiki
:日期: 2019/11/1

章节
----

章节标题使用下划线(上划线可选)，且符号的长度不能小于文本长度。

章节标题的等级从高到底可划分(参考 `<https://pandoc.org/try/?text=&from=markdown&to=rst>`_ 划分)：

* ``=`` 小章节
* ``-`` 子章节
* ``~`` 子章节的子章节
* ``^`` 子章节的子章节的子章节
* ``'`` 子章节的子章节的子章节的子章节
* ``"`` 段落

段落
----

| 段落使用空行分隔。且对齐是 reST 的操作符，同一段落需要左对齐。  
| 同一段落换行需要使用这个和上面的语句是同一段落。

这个和上面不是同一段落。

内联标记
--------

粗斜体
~~~~~~~

* 星号、反引号：``*text 是斜体*，`这也是是斜体``` -->> “*text 是斜体*，`这也是是斜体`”
* 双星号：``**text 是粗体**`` -->> **text 是粗体** 

代码
~~~~~

**行内代码** 使用双反引号标记，如 ````text 是代码```` -->> ``text 是代码``。

**代码段** 使用 reST 标记 ``::``：在代码模块之前的段落使用 ``::`` 标记。且缩进代码块，使用空行与周围文本分割：

.. sidebar:: 关于 ``::``

  * ``::`` 前边是空白字符时，则会移除标记。
  * ``::`` 前边是非空白时，用一个冒号取代标记。

下面将介绍一段代码::

  这是代码正文。
  这也是代码。

  这是代码的下一段。

代码已经介绍完毕。示例::

  .. py:function:: fun1()

    Return ……

  .. py:function:: fun2()

    Return ……

看起来是

.. py:function:: fun1()

  Return ……

.. py:function:: fun2()

  Return ……

符号转义
~~~~~~~~

使用反斜杠进行符号转义。

* 星号：``\*text 不是斜体\*`` -->> \*text 不是斜体\*
* 反引号：``\`\`text 不是代码\`\``` --->>> \`\`text 不是代码\`\`

内联标记注意事项
~~~~~~~~~~~~~~~~

.. warning::

  * 不能互相嵌套：``**see :func:`foo`**`` 是错误的`` -->> **see :func:`foo`**
  * 内容前后没有空白：``* text 是错误的*``
  * 使用特殊字符分隔时使用反斜线转义：``thisis\ *one*\ word`` -->> thisis\ *one*\ word.

文本解释角色
------------

.. todo:: 理解文本解释角色。

reST 提供“文本解释角色”，允许以特定方式解释文本。Sphinx 使用这种方式提供语义标记及参考索引，操作符为 ``:rolename:`content```

reST 提供以下规则::

  * :emphasis:`text` 等价于 *text*
  * :strong:`text` 等价于 **text**
  * :literal:`text` 等价于 ``text``
  * :subscript:`text` 下标
  * :superscript:`text` 上标
  * :title-reference:`text` 用于书、期刊等的标题

链接
-----

外部链接
~~~~~~~~

* 文字链接：使用 ```链接文本 <链接地址>`_`` 插入网页链接。如 `链接 1 <https://cn.bing.com/>`_。
* 自动链接：链接文本是网址或电子邮件信箱时，使用 ```<链接地址>`_``。如 `<https://mail.google.com/mail/u/0/>`_。
* 把链接和标签分开。如::

    这里是 `链接 2`_。
    中间包含一些文本段落。

    .. _链接 2: https://translate.google.com/

  这里是 `链接 2`_。
  中间包含一些文本段落。

  .. _链接 2: https://translate.google.com/

  .. _inner-link:

内部链接
~~~~~~~~

标准的 reST 支持章节链接，使用 ```章节标题`_``。如返回 `链接`_。

查看 :doc:`/syntax/sphinx-rest` 交叉索引章节。

列表与引用
----------

无序列表
~~~~~~~~

使用一个星号和一个空格::

  * 无序列表
  * 无序列表

* 无序列表
* 无序列表

有序列表
~~~~~~~~

使用编号::

  1. 使用编号的有序列表
  2. 使用编号的有序列表

1. 使用编号的有序列表
2. 使用编号的有序列表

或者使用井号 ``#.`` 自动加序号::

  #. 使用井号的有序列表
  #. 使用井号的有序列表

#. 使用井号的有序列表
#. 使用井号的有序列表

嵌套列表
~~~~~~~~

列表可以嵌套，但是需要用空行分隔字列表和父列表::

  * 这是父列表
  * 这也是父列表

    * 这是子列表
    * 这也是子列表

  * 这还是父列表

* 这是父列表
* 这也是父列表

  * 这是子列表
  * 这也是子列表

* 这还是父列表

定义列表
~~~~~~~~

.. todo:: 理解定义列表、引用段落和行模块

表格
----

网格表格
~~~~~~~~

可自定义表格的边框::

  +------------------------+------------+----------+----------+
  | Header row, column 1   | Header 2   | Header 3 | Header 4 |
  | (header rows optional) |            |          |          |
  +========================+============+==========+==========+
  | body row 1, column 1   | column 2   | column 3 | column 4 |
  +------------------------+------------+----------+----------+
  | body row 2             | ...        | ...      |          |
  +------------------------+------------+----------+----------+

简单表格
~~~~~~~~

书写简单，但是有限制：需要有多行，且第一列元素不能分行显示::

  =====  =====  =======
  A      B      A and B
  =====  =====  =======
  False  False  False
  True   False  False
  False  True   False
  True   True   True
  =====  =====  =======

图片
----

图像指令代码如下::

  .. image:: image_name
     选项

其中，``image_name`` 必须是图片的相对路径。或者以源目录为根目录的绝对路径。

Sphinx 自动将图片文件拷贝到输出目录的子目录，输出 HTML 时目录为 ``_static``。

选项指的是图片的大小(``width`` 和 ``height``)、对齐等。

.. image:: /syntax/ref/natsume.jpg

引用
-----
